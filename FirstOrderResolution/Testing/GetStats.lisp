

(setf kb1 nil)
(setf time2 (get-internal-run-time))
(setf num-clauses 5)
(setf _num-constants 4)
(setf _num-functions 4)
(setf total-kb-gen 0)
(setf kb-miss 0)
(setf total-query-gen 0)
(setf query-miss 0)

(defun split-by-one-space (string)
    "Returns a list of substrings of string
divided by ONE space each.
Note: Two consecutive spaces will be seen as
if there were an empty string between them."
    (loop for w = 0 then (1+ x)
          as x = (position #\Space string :start w)
          collect (subseq string w x)
          while x))


(defun saveTime (output alg result _num-clauses _num-constants _num-functions timing)
  (format output alg)
  (format output " ")
  (format output (write-to-string result))
  (format output " ")
  (format output (write-to-string num-clauses))
  (format output " ")
  (format output (write-to-string num-constants))
  (format output " ")
  (format output (write-to-string num-functions))
  (format output " ")
  (with-open-file (temp "/Users/BS/Programs/Thesis/FirstOrderResolution/Testing/dumbyfile.txt"
			:direction :output
			:if-exists :supersede
			:if-does-not-exist :create)
		  (format temp timing))
  (let ((tempfile (open "/Users/BS/Programs/Thesis/FirstOrderResolution/Testing/dumbyfile.txt"))
	(line nil))
    (read-line tempfile)
    (read-line tempfile)
    (setf line (read-line tempfile))
    (setf line (split-by-one-space line))
    (format output (caddr line))
    (format output " ")
    (read-line tempfile)
    (setf line (read-line tempfile))
    (setf line (split-by-one-space line))
    (format output (caddr line))
    (format output "~%")
    )
  )



(with-open-file (output "/Users/BS/Programs/Thesis/FirstOrderResolution/Testing/StatFile.txt"
			:direction :output
			:if-exists :supersede
			:if-does-not-exist :create)
		(loop while (> num-clauses 2) do
		      (setf num-constants _num-constants)
		      (loop while (> num-constants 0) do
			    (setf num-functions _num-functions)
			    (loop while (> num-functions 0) do
				  (print (concatenate 'string "total-kb-gen:" (write-to-string total-kb-gen)))
				  (print (concatenate 'string "kb-miss:" (write-to-string kb-miss)))
				  (print (concatenate 'string "total-query-gen:" (write-to-string total-query-gen)))
				  (print (concatenate 'string "query-miss:" (write-to-string query-miss)))
				  (print (sb-thread:list-all-threads))
				  (print num-functions)
				  (finish-output)
				  (setf j 4)
				  (loop while (> j 0) do
					(setf flag1 T)
					(setf flag2 T)
					(let ((kbgen (sb-thread:make-thread (lambda ()
									      (setf kb1 (gen-KB num-clauses num-constants num-functions))
									      (setf flag1 nil))))
					      (timer (sb-thread:make-thread (lambda ()
									      (let ((w 5))
										(loop while (> w 0) do
										      (sleep 1)
										      (setf w (- w 1))
										      )
										(setf flag2 nil))))))
					  (loop while (and flag1 flag2) do
						(cons nil nil))
					  (sb-thread:terminate-thread timer)
					  (sb-thread:terminate-thread kbgen)
					  (sleep 1)
					  (print 'tried)
					  (print (sb-thread:list-all-threads))
					  (sleep 1)
					  (finish-output)
					  (setf total-kb-gen (+ total-kb-gen 1))
					  (if (not flag1) 
					      (let ((TC nil)
						    (TI nil)
						    (flag3 T))
						(setf i 5)
						(loop while (> i 0) do
						      (setf curquery (gen-query))
						      (setf total-query-gen (+ total-query-gen 1))
						      (setf flag1 T)
						      (setf flag2 T)
						      (setf flag3 T)
						      (let ((TCThread (sb-thread:make-thread (lambda ()
											       (setf TC (test-thread-classic kb1 curquery))
											       (setf flag1 nil))))
							    (TIThread (sb-thread:make-thread (lambda ()
											       (setf TI (test-thread-iter kb1 curquery))
											       (setf flag2 nil))))
							    (timer (sb-thread:make-thread (lambda ()
											    (let ((w 5))
											      (loop while (> w 0) do
												    (sleep 1)
												    (setf w (- w 1))
												    )
											      (setf flag3 nil))))))
							(loop while (or (and flag1 flag3) (and flag2 flag3)) do
							      (cons nil nil))
							(sb-thread:terminate-thread TCthread)
							(sb-thread:terminate-thread TIthread)
							(sb-thread:terminate-thread timer)
							(setf total-query-gen (+ total-query-gen 1))
							(if (not flag1)
							    (progn
							      (setf testsave (with-output-to-string (*trace-output*) (time (Test-Thread-Classic kb1 curquery))))
							      (saveTime output "TC" tc num-clauses num-constants num-functions testsave)
							      (setf testsave (with-output-to-string (*trace-output*) (time (Test-Thread-Iter kb1 curquery))))
							      (saveTime output "TI" ti num-clauses num-constants num-functions testsave)
							      (setf i (- i 1))
							      )
							  (setf query-miss (+ query-miss 1))
							  )
							)
						      )
						(setf j (- j 1))
						)
					    (setf kb-miss (+ kb-miss 1))
					    )
					  )
					)
				  (setf num-functions (- num-functions 1))
				  )
			    (setf num-constants (- num-constants 1))
			    )
		      (setf num-clauses (- num-clauses 1))
		      )
		)
(exit)
				
